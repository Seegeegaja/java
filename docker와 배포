172.31.14.63


고정IP : 13.210.114.176
mysql user : admin
mysql password: wnsdyd821
db_name : mydb

AWS_IP 13.210.114.176
AWS_KEY
DOCKER_IMAGE_NAME full-stack
DOCKER_USER_NAME seegeegaja
DOCKER_USER_PW Wnsdyd12!@

rds endpoint : full-stack-db.cro4um2a2zrx.ap-southeast-2.rds.amazonaws.com


172.31.14.63



고정IP : 13.210.114.176 -- EC2 탄력IP
mysql user : admin   -- RDS
mysql password: wnsdyd821 -- RDS
db_name : mydb  -- RDS  접속 후 본인 생성

AWS_IP 13.210.114.176 -- 고정IP
AWS_KEY -- pem 키 (mobaXtem : 접속 시 쓰는거)
DOCKER_IMAGE_NAME dopaminx ---  Docker Image Build 할 때 기초 이름
DOCKER_USER_NAME seegeegaja -- 재정 docker hub id
DOCKER_USER_PW Wnsdyd12!@  -- 재정 docker hub pw




docker build -t seegeegaja/full-stack-backend . 
docker push seegeegaja/full-stack-backend

docker build -t seegeegaja/full-stack-frontend . 
docker push seegeegaja/full-stack-frontend
EC2 버버 임대
ubuntu - username = ubuntu
AWS linux - username = ec2-user
drwxr-x--- 4 ubuntu ubuntu 4096 Mar 26 02:37 ubuntu



- 파일   = rwx(유져)rwx(그룹)rwx(외부)	777 a.txt
d 디렉토리


rwx 2진수로 바꾸면 421= 7
746 rwx r-- --x


-- ./gradlew build
-- 해당 jar 파일이 있는 곳으로 이동




chmod u+x gradlew


netstate -nlpt

timedatectl list-timezones | grep Seoul

timedatectl 

sudo timedatectl set-timezone Asia/Seoul








spring:
  datasource:
    url: jdbc:mysql://full-stack-db.cro4um2a2zrx.ap-southeast-2.rds.amazonaws.com:3306/mydb
    username: admin
    password: wnsdyd821
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: create-drop

docker-compose down --remove--orphans






name: 배포

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest # 작업이 실행될 환경
    steps:
    - name: 체크아웃
      uses: actions/checkout@v3
    - name: 도커허브에 로그인
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USER_NAME }}
        password: ${{ secrets.DOCKER_USER_PW }}
    - name: 이미지 빌드
      run: docker build -t ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_IMAGE_NAME }}-front:latest .
    - name: 도커허브에 이미지 푸시
      run: docker push ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_IMAGE_NAME }}-front
    - name: AWS EC2에 ssh 접속 후 배포
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AWS_IP }}
        port: 22
        username: ubuntu
        key: ${{ secrets.AWS_KEY }}
        script: |
          sudo timedatectl set-timezone Asia/Seoul
          echo "AWS 연결"
          docker pull ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_IMAGE_NAME }}-front
          docker-compose up -d --build




원래(docker 사용) front deploy.yml

name: 배포

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest # 작업이 실행될 환경
    steps:
    - name: 체크아웃
      uses: actions/checkout@v3
    - name: Node.js 설정
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: 프로젝트 의존성 설치
      run: npm install # 또는 yarn install

    - name: React 빌드
      run: npm run build # 또는 yarn build

    - name: AWS CLI 설정
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2 # 서울 리전 (필요시 변경)

    - name: S3에 빌드 파일 업로드
      run: aws s3 sync build/ s3://${{ secrets.AWS_S3_BUCKET_NAME }}
docker 미사용

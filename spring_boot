https://start.spring.io/ 프로젝트 만들기 전에 드가서 확인
https://mvnrepository.com/artifact/org.projectlombok/lombok/1.18.24 디펜던시

만들고 설정 들어가서 설정하기 2개 있어 

사용자->웹서버()-정적인 파일들 -> WAS()-> 자바스프링 ->db

서버요청
react Router = 3000/main(서버로 안가는것)

-서버가 main.html파일을 생성해서 클라이언트에게 전달
크롬이 화면에 뿌려줌


localhost:8080/main이게 서버로 날아감 -->요청
GET/POST 
WAS가 get인지 post인지 확인한다

main -->
shop -->
shop/shoes/0 --> 이런주소가 있니? 
WAS가 파악을 해줌 




      
클라--->



post는 <form>에서만 한다
el표기법 ${name}

xmlns:th="http:www.thymeleaf.org"!!!!!!!!!

utility
0.타임리프 데이터표시;
-- model : ${}
--utility : #{}
--경로... 링크 : @{'/main/{i}'} i에다가 갈곳 ㄱㄱ 
웹상에서 데이터를 표현하는 여러가지 방법
1.날짜 ,시간
2.숫자 , 컴마,소수자리...
3.돈 ....


0.단순 Url
/main/detail
<a href="/main/detail"> ===>Get mapping
경로를 바뀔라면
@ 하고 바뀔곳에 () 괄호로 묶어야한다 

1.쿼리 스트링(Get방식)--쿼리 파라메터(파라메터=값을 전달하는것)
http://localhost:8080/main?name=장원영&age=20
http://localhost:8080/main(name=안유진&age=22)

2.경로변수(Path Variable)Variable=바뀔수 있는것 /Get Or Post 일수 있다
http://localhost:3000/shoes/details/3
http://localhost:3000/(foods)/details/(1)

3.혼합 (쿼리스트링+경로변수)
http://localhost:8080/shoes/3?name=nike




Article



스프링 프레임 워크레서 자동으로 관리해 주는 컴포넌트
@Controller
@Service
@Repository
@Component
스프링이 특별히 관리하는 클레스 
(요청을 너무 많이해서 자원을 한곳이서 관리하고 처리하는 것들을 스프링이 대신 해줌)
--------------------------------------------------------------------------------------------------

스프링에서 기존에 상용한 Annotation
- @Controller : 외부 url요청을 받는 아이 
- @RequestMapping("/basic") -- 클레스 차원에서 모두 /basic 밑이다
- 클레스 밑에 메서드
--@GetMapping --url에 정보가 노출되서 전달되는 것(@PathVariable , @RequestParam)
--@PostMapping --url에 정보가 숨겨서 오는것 
-전달되는 url
1)쿼리 파라메터
 http://localhost:8080/basic/main?name=장원영&age=20
 @GetMapping("/basic/main")
 @RequstParam("name") String name
2)경로 변수
 http://localhost:8080/basic/3
@PathVariable("id") int id


Lombok
1)생성자
-@NoArgConstryctor ---인자없는 깡통생성장
-@AllArg .. ---전체 인자로 갖는 생성자
-@RequiredArg ... -- 선택적 인자(생성자 주입방식)

@Getter @Setter @ToString @EqualsAndHashCode + @Req...
@Data

thymeleaf
-저 쪽 자료... 클레스(DTO) -- DTO구조(철자,대소문자...)
 model.addAttribute("data" , 어쩌구DTO)
-${data} ===>${data.name}
-xmlns:th="www.thymeleaf.org"
-th:text , th:value , th:href , th:field , th:name , th:classppend...
-link : th:href = "@{/basic/main}"
-literal : th:href = "@{|/data/${data}|}"
-th:each="user ,i : ${users}" th:object="${user}"
=날짜, 돈 , 시간 , 숫자.... :유틸리티
 #temporals{ }

HTML(템플릿)<->DTO<->컨트롤러<->서비스<->리포지 토리<->저장소
						num(있으면 좋고,없으면 null이라도 가져간다)
num == Optional

로그인처리 방법
1.쿠키(Cookie) - 관리주체... 클라이언트
2.세션(session(유효기간이 존제)) - 괸리주체... 서버 모델을 사용하것과 비슷
3.스프링시큐리티(Spring Security) - 로그인
4.소셜 로그인방식(Auth2 Client) -카카오 네이버 
5.토큰(Token) 

AOP - 관점지향적 프로그레밍


스프링이 관리하는 객체 -- 인스턴스
@Component
@Service
@Bean
@Repository
@Controller
전부 한가지 

Hibernate : ORM(Object Relation Mapper)처리를 담당하는 아이

Hibernate중에 자바진영에서 사용하려고 한게 JPA











Controller --> 	Service 		-> Repository
model<-dtoList<--  	(Entity List-->Dto list)<--Entity Member List


Query Method(쿼리 실행하는 기능)

-Jpa에서 지원하는 기능
-사용자가 만드는 쿼리 (작명만 하면 됨)
-명령어 순서는 쿼리 문법 순서
-낙타표기법(Camel Case)
Select * from user where id = 1;이걸 이렇게 findById(1)
Optional<User> findById(Long id)

Select * from user where name = 1;이걸 이렇게 findByName(String 찾을 이름)
한명을 찾을꺼면 Optional 동명이인이 있을거 같다 List<Users>

SELECT TOP3* FROM USERS where like_color = 'Pink'
findTop3ByLikeColor

성별이 남성이고 ,색상이 Pink
select * from users where gender = 'male' and like_color = 'Pink'
List<Users> findByGenderAndLikeColor(Gender , String...;) 

select * from users where like_color


select * from user where id between 1 and 10 order by name desc;

findByIdBetweenOrderByNameDesc

select top 10 * from users where like_color = 'Orange' order by gender asc, created_at desc;
findTop10ByLikeColorOrderByGenderAscCreatedAtDesc

기본적인 흐름:
Exam 객체를 생성하고, 해당 Exam 객체와 연결할 Student 객체를 찾아옵니다.
Exam 객체의 student 필드를 설정하고, Student 객체의 examList에 Exam 객체를 추가합니다.
Exam 객체와 Student 객체를 각각 EntityManager를 사용하여 저장합니다.
CascadeType.PERSIST가 이미 설정되어 있기 때문에, Student 객체를 저장하면 연관된 Exam도 저장됩니다.
insert 메서드 수정 방법
먼저, insert 메서드에서 Exam 객체와 Student 객체를 다루는 방법을 정리합니다.

java
복사
public void insert(Exam exam, String studentId) {
    // 1. 학생 조회
    Student student = em.find(Student.class, studentId);

    // 학생이 존재하지 않으면 예외 처리 (선택사항)
    if (student == null) {
        throw new RuntimeException("학생을 찾을 수 없습니다.");
    }

    // 2. Exam 객체에 학생 설정
    exam.setStudent(student);

    // 3. Student 객체의 examList에 해당 Exam 추가
    student.getExamList().add(exam);

    // 4. Exam 객체 저장 (학번과 관련된 Exam 정보가 저장됨)
    em.persist(exam);

    // 5. Student 객체 저장 (cascade로 Exam도 저장됨)
    em.persist(student); // 이 라인은 선택적입니다.
}
1. 학생 조회
java
복사
Student student = em.find(Student.class, studentId);
EntityManager의 find 메서드를 사용하여 studentId로 Student 객체를 조회합니다. Student가 존재하지 않으면 예외를 던지거나 다른 처리를 할 수 있습니다.

2. Exam 객체에 Student 설정
java
복사
exam.setStudent(student);
Exam 객체의 student 필드를 해당 Student 객체로 설정합니다. Student와 Exam은 양방향 관계이므로, Exam 객체는 Student 객체를 참조해야 합니다.

3. Student 객체의 examList에 Exam 추가
java
복사
student.getExamList().add(exam);
Student 객체는 여러 개의 Exam을 가질 수 있습니다. Exam 객체가 student.getExamList()에 추가되도록 합니다. 이렇게 함으로써 양방향 관계를 잘 유지할 수 있습니다.

4. Exam 객체 저장
java
복사
em.persist(exam);
Exam 객체를 저장합니다. exam 객체는 student_id 외래 키와 연결되므로, exam 객체를 저장하면 student_id가 자동으로 설정됩니다.

5. Student 객체 저장
java
복사
em.persist(student);
Student 객체를 저장합니다. CascadeType.PERSIST가 설정되어 있으므로, Student를 저장하면 Exam 객체도 함께 저장됩니다. 그러나 Exam 객체를 persist한 이후에 Student를 저장하는 이유는, Exam 객체를 먼저 저장하고, 이후 Student 객체의 상태를 갱신하려는 목적입니다. 만약 CascadeType.PERSIST가 제대로 설정되어 있다면 Exam을 저장할 때 Student가 자동으로 저장됩니다.

이 코드에서는 Student를 직접 저장할 수도 있고, Exam만 저장하고도 관계가 잘 유지될 수 있습니다. 이는 Cascade 설정에 따라 다릅니다.

StudentDAO 클래스 수정 예시
java
복사
package com.my.hacksa.dao;

import com.my.hacksa.entity.Exam;
import com.my.hacksa.entity.Student;
import jakarta.persistence.EntityManager;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
@Transactional
public class StudentDAO {

    @Autowired
    private EntityManager em;

    // 모든 학생 리스트 조회
    public List<Student> getAllList() {
        String sql = "SELECT s FROM Student AS s " +
                     "ORDER BY s.student_id ASC";
        return em.createQuery(sql, Student.class).getResultList();
    }

    // Exam과 Student 연결하여 저장하는 메서드
    public void insert(Exam exam, String studentId) {
        // 1. 학생 조회
        Student student = em.find(Student.class, studentId);

        // 학생이 존재하지 않으면 예외 처리
        if (student == null) {
            throw new RuntimeException("학생을 찾을 수 없습니다.");
        }

        // 2. Exam 객체에 student 설정
        exam.setStudent(student);

        // 3. Student 객체의 examList에 해당 Exam 추가
        student.getExamList().add(exam);

        // 4. Exam 객체 저장
        em.persist(exam);

        // 5. Student 객체 저장 (CascadeType.PERSIST로 자동으로 Exam도 저장됨)
        em.persist(student); // (선택 사항)
    }
}
설명
getAllList(): Student 객체를 EntityManager의 createQuery()를 사용하여 JPQL로 조회하는 예시입니다.
insert(Exam exam, String studentId): Exam 객체를 저장할 때, 먼저 Student를 찾고, Exam과 Student를 연관시킨 후 저장합니다. 이 과정에서 CascadeType.PERSIST를 사용하여 Exam 객체를 저장하는 것만으로 Student와의 연관 관계를 유지하면서 저장이 가능합니다.
CascadeType에 대한 설명
CascadeType.PERSIST: Student 객체를 저장하면 연관된 Exam 객체도 자동으로 저장됩니다.
CascadeType.REMOVE: Student 객체가 삭제되면 연관된 Exam 객체도 삭제됩니다.
결론
**EntityManager**를 사용하여 Exam과 Student 객체를 처리할 수 있습니다.
양방향 관계에서 두 엔티티를 저장하려면, 연관된 객체들을 올바르게 설정한 후 persist로 저장합니다.
CascadeType.PERSIST를 적절히 사용하면, Student를 저장할 때 관련된 Exam이 자동으로 저장됩니다.
















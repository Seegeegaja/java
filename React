html + css + javascript = application 제작


SPA(Single Page Application) -> app
-Reeact : Javascript --> React 문법
-Vue : JS안씀 --> Vue 문법

app -> Build(배포하기 위한 필요 파일 생성)

-- index.html / css / js

프로젝트 생성 방법
1.폴더를 생성 
2. 폴더 shift 우클릭 -> 여기에 powershell창 열기

set-ExecutionPolicy unrestricted

npx create-react-app test-app

npm install web-vitals

집에서 ㅇ 할때 

npm install

npm install react-router-dom --save


-일반 변수 : 바뀌면 다시 자동rendering 안됨
-state : 변수랑 비슷, 자료를 잠깐 정장하는 용도
          바뀌면, 자동 rendering되서 페이지가 바뀜


-특정 모듈을 추가로 설치하는 명령
>npm install 모듈명 = npm -i 모듈명 (실패할수 있고 문제가 있으면 yarn으로 설치 하며 yarn이 정확하게 설치함)
>yarn add 모듈명

**git 업로드 제외 
https://www.toptal.com/developers/gitignore/



index = y && showMdal = false 


http://localhost:3000 ---리엑트

SAP --index(page)
Router
http://localhost:3000/login
http://localhost:3000/main
http://localhost:3000/detail?id=3
Nested Route (중첩 라우팅)
http://localhost:3000/admin/manger
http://localhost:3000/admin/login
http://localhost:3000/admin/logout

http://localhost:3000/about
http://localhost:3000/about/member
http://localhost:3000/about/location

http://localhost:8080 --> 아마존 --> http://localhost:5000

url에 값을 전달 하는 방법은 2가지
-Get : URL의 경로 및 전달값을 표현 해주는 방식 (노출)
-- 쿼리 스트링 방식(Query String)
   http://localhost/idol?name=장원영&age=20
-- pathVariable(경로 변수)
   http://localhost/idol/1
{ name : '장원영' , age : 20 , position : '비주얼' }
-Post : URL의 경로만 보임(전달값은 안보임)

우리 신발 요청
localhost:3000/detail?id=0 -- 쿼리 스트링 타입
==== 폼에서 submit 단추 누르면 name값이 id인 애의 값을 전달
localhost:3000/detail/0 -- 패스벨리어블(PathVarible) 타입
==== 특정 link를 클릭 하면 저 위치의 경로의 정보 보내줘



경로 뒤에 전달 되는 값을 (((((파라메터)))))라고 함

뿌려지기 전에 마운트


화면에서 사라질때 언마운트

데이터가 바뀌는걸 usestate


react 설치 도구가 yarn/install     
yarn 설치 방법 (npm install -g yarn 을 입력하여 yarn 을 설치하고)
npm install 프로그램 명
yarn add 프로그램 명

npm으로 뭔가 설치를 했는데 문제가 생겼을때
yarn으로 설치하면 해경이 됨
axios ===> react,vue를 씀

https://seegeegaja.github.io/js/react_data_01.json
스프레드를 사용하여 배열에 복사 후 합치기


npm install @reduxjs/toolkit react-redux
설치 후
store.js 만들고 
import {configureStore} from '@reduxjs/toolkit'
export default configureStore({
retrun : {}
})
index.js에 가서 
import {Providet} from "react-redux";
import store from "./store"
App.js에가는 가는 모든걸 감싸야 하며 
<Provider store={store}>
 <BrowserRouter>
      <App />
  </BrowserRouter>
</Provider>
모든걸 덮는 느낌? 









테이블 위에 seegeegaja님 장바구니
----------------------------------------------------------------------------
#	상품명		수량	변경하기
----------------------------------------------------------------------------
1	White and Black	2 +-	단추
----------------------------------------------------------------------------
2	Red Knit		1 +-	단추





스토어에서 작업이 필요한 경우
만약 총 금액을 여러 곳에서 사용하거나, 상태로 관리하고 싶다면 스토어에 추가할 수 있어. 예를 들어, 장바구니 데이터가 업데이트될 때마다 총 금액을 자동으로 계산하려면 리듀서에서 작업하면 돼.

리듀서에서 총 금액 계산 예시
스토어에 총 금액을 추가하려면 cartData 슬라이스에 totalAmount 상태를 추가하고, 상품이 추가/삭제/수량 변경될 때 자동으로 계산되도록 설정할 수 있어.

let cartData = createSlice({
  name: "cartData",
  initialState: {
    items: [
      { id: 0, title: "White and Black", count: 2, price: 120000 },
      { id: 1, title: "Red Knit", count: 1, price: 120000 },
    ],
    totalAmount: 0, // 총 금액 상태 추가
  },
  reducers: {
    pluse(state, action) {
      const item = state.items.find((x) => x.id === action.payload);
      if (item) {
        item.count++;
        state.totalAmount += item.price; // 총 금액 업데이트
      }
    },
    minus(state, action) {
      const item = state.items.find((x) => x.id === action.payload);
      if (item && item.count > 0) {
        item.count--;
        state.totalAmount -= item.price; // 총 금액 업데이트
      }
    },
    deletecart(state, action) {
      const item = state.items.find((x) => x.id === action.payload);
      if (item) {
        state.totalAmount -= item.price * item.count; // 총 금액 업데이트
        state.items = state.items.filter((x) => x.id !== action.payload);
      }
    },
    calculateTotal(state) {
      state.totalAmount = state.items.reduce(
        (acc, x) => acc + x.price * x.count,
        0
      );
    },
  },
});



쿠키를 제일 많이 쓴다 --
특정 싸이트에 방문할때의 흔적을 클라이언트에 남김
클라이언트가 관리

Session -- 싸이트에 들어가서 접속되어있는상태(정보를 주고받을수 있는 상태)
서버가 관리

locallstoryge는 꺼도 남아있음 




JSON.parse


JSON.stringify(product)
--> 오브젝트 를 JSON타입으로 바꾼다




axios가 안깔려 있으면 fetch를 써서 링크를 받아 올수 있다 그대신
JSON타입으로 와서 바꿔주어야 한다
fetch : 자바스크립트에서 기본 제공 함수

Axios : node.js 기반의 react,vue 에서 api 호출

Ajax : jQuery 기능을 설치한 이후에 사용가능



[0,2,0,2] ===> set[0,2]
Array - 중복허용 

ArrayList - 중복허용

Map -키는 중복불허 , 내용 중복허용

Set - 중복 불가
(Array랑 비슷 )



리엑트 부트 스트렙 사용
테이블,카드 사용(이미지, 제품명)
클릭시 상세 페이지로 이동하기
 









































//

 



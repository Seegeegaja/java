https://start.spring.io/ 프로젝트 만들기 전에 드가서 확인
https://mvnrepository.com/artifact/org.projectlombok/lombok/1.18.24 디펜던시

만들고 설정 들어가서 설정하기 2개 있어 

사용자->웹서버()-정적인 파일들 -> WAS()-> 자바스프링 ->db

서버요청
react Router = 3000/main(서버로 안가는것)

-서버가 main.html파일을 생성해서 클라이언트에게 전달
크롬이 화면에 뿌려줌


localhost:8080/main이게 서버로 날아감 -->요청
GET/POST 
WAS가 get인지 post인지 확인한다

main -->
shop -->
shop/shoes/0 --> 이런주소가 있니? 
WAS가 파악을 해줌 




      
클라--->



post는 <form>에서만 한다
el표기법 ${name}

xmlns:th="http:www.thymeleaf.org"!!!!!!!!!

utility
0.타임리프 데이터표시;
-- model : ${}
--utility : #{}
--경로... 링크 : @{'/main/{i}'} i에다가 갈곳 ㄱㄱ 
웹상에서 데이터를 표현하는 여러가지 방법
1.날짜 ,시간
2.숫자 , 컴마,소수자리...
3.돈 ....


0.단순 Url
/main/detail
<a href="/main/detail"> ===>Get mapping
경로를 바뀔라면
@ 하고 바뀔곳에 () 괄호로 묶어야한다 

1.쿼리 스트링(Get방식)--쿼리 파라메터(파라메터=값을 전달하는것)
http://localhost:8080/main?name=장원영&age=20
http://localhost:8080/main(name=안유진&age=22)

2.경로변수(Path Variable)Variable=바뀔수 있는것 /Get Or Post 일수 있다
http://localhost:3000/shoes/details/3
http://localhost:3000/(foods)/details/(1)

3.혼합 (쿼리스트링+경로변수)
http://localhost:8080/shoes/3?name=nike




Article



스프링 프레임 워크레서 자동으로 관리해 주는 컴포넌트
@Controller
@Service
@Repository
@Component
스프링이 특별히 관리하는 클레스 
(요청을 너무 많이해서 자원을 한곳이서 관리하고 처리하는 것들을 스프링이 대신 해줌)
--------------------------------------------------------------------------------------------------

스프링에서 기존에 상용한 Annotation
- @Controller : 외부 url요청을 받는 아이 
- @RequestMapping("/basic") -- 클레스 차원에서 모두 /basic 밑이다
- 클레스 밑에 메서드
--@GetMapping --url에 정보가 노출되서 전달되는 것(@PathVariable , @RequestParam)
--@PostMapping --url에 정보가 숨겨서 오는것 
-전달되는 url
1)쿼리 파라메터
 http://localhost:8080/basic/main?name=장원영&age=20
 @GetMapping("/basic/main")
 @RequstParam("name") String name
2)경로 변수
 http://localhost:8080/basic/3
@PathVariable("id") int id


Lombok
1)생성자
-@NoArgConstryctor ---인자없는 깡통생성장
-@AllArg .. ---전체 인자로 갖는 생성자
-@RequiredArg ... -- 선택적 인자(생성자 주입방식)

@Getter @Setter @ToString @EqualsAndHashCode + @Req...
@Data

thymeleaf
-저 쪽 자료... 클레스(DTO) -- DTO구조(철자,대소문자...)
 model.addAttribute("data" , 어쩌구DTO)
-${data} ===>${data.name}
-xmlns:th="www.thymeleaf.org"
-th:text , th:value , th:href , th:field , th:name , th:classppend...
-link : th:href = "@{/basic/main}"
-literal : th:href = "@{|/data/${data}|}"
-th:each="user ,i : ${users}" th:object="${user}"
=날짜, 돈 , 시간 , 숫자.... :유틸리티
 #temporals{ }











